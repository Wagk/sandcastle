/*!************************************************************
	Created	:	2016/03/13
	Note	:
		
**************************************************************/
#include "concurrent_trigger.h"

namespace Concurrent
{


  /*!************************************************************

  **************************************************************/
  Trigger::Trigger(int count /*= 0*/)
    : m_counter(count)
  {

  }


  /*!************************************************************

  **************************************************************/
  Trigger::Trigger(const Trigger& rhs)
    : m_counter(rhs.m_counter.load())
  {

  }

  /*!************************************************************

  **************************************************************/
  void Trigger::operator++()
  {
    ++m_counter;
  }

  /*!************************************************************

  **************************************************************/
  void Trigger::operator--()
  {
    --m_counter;
  }

  /*!************************************************************

  **************************************************************/
  Trigger& Trigger::operator=(const Trigger& rhs)
  {
    m_counter.store(rhs.m_counter.load());

    return *this;
  }

  /*!************************************************************

  **************************************************************/
  bool Trigger::Done() const
  {
    return m_counter.load() == 0;
  }

  /*!************************************************************

  **************************************************************/
  bool Trigger::operator!=(int cmp)
  {
    return operator==(cmp) == false;
  }

  /*!************************************************************

  **************************************************************/
  bool Trigger::operator==(int cmp)
  {
    return m_counter.load() == cmp;
  }

  /*!************************************************************

  **************************************************************/
  void Trigger::operator=(int setcount)
  {
    m_counter.store(setcount);
  }

} //namespace Concurrent

/*!************************************************************
	Todo:
			
	References:
		
**************************************************************/
